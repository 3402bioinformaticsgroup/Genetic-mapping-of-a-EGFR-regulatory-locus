########### Mapping sequencing reads to genome:
###########
bowtie2 -p 20 -N 0 --n-ceil 0 --end-to-end -k 20 -S output.sam -x mapping.result.sam -x reference.sequence.index(GCA_002775205.2) input.fastq

########### Sort mapping result:
###########
samtools view -b -q 30 -S input.sam > output.bam
samtools sort input.bam sorted.bam

########### Variant calling and genotypingï¼š
###########
samtools mpileup -f reference.sequence.(GCA_002775205.2).fa -b sorted.bam.files.txt -u | bcftools call -mv > snp_indel.vcf
samtools mpileup -f reference.sequence.(GCA_002775205.2).fa -b input.bam.files.txt -u | java -jar VarScan.v2.3.7.jar mpileup2snp --min-coverage 2 --p-value 0.05 > snp.txt
samtools mpileup -f reference.sequence.(GCA_002775205.2).fa -b input.bam.files.txt -u | java -jar VarScan.v2.3.7.jar mpileup2indel --min-coverage 2 --p-value 0.05 > indel.txt

########### formatting genotyping results (varscan result)
########### perl scripts:
open(my $fh, '>', $output);
open FILE, $input or die "\n something is wrong$!";
print $fh "#CHROM\tPOS\tTYPE\tDP\tRef\tAlt\t";
foreach my $i (1..$NoSample){
    my $temp = 'Sample' . '' . $i;
    print $fh "$temp\t";
}
print $fh "\n";
while(defined(my $line = <FILE>)){
    unless($line =~ /^Chrom\tPosition/){
    $line =~ s/\s/\t/g;
    my @line_element = split "\t", $line;
    my @INFO_element = split "\:", @line_element[4];
        my $depth = @INFO_element[1];
        print $fh "@line_element[0]\t@line_element[1]\tVar\t$depth\t@line_element[2]\t@line_element[3]\t"; #print registration information
        foreach my $i (1..$NoSample){
            my @gt = split /\:/, @line_element[9+$i];
            my $pval = sprintf("%.5E",@gt[5]);
            print $pval;
            if(@gt[0] eq @line_element[2] && $pval>=0.05){print $fh "0/0\t";}  # test for reference call
             elsif(@gt[0] eq "N"){print $fh "9/9\t";}                                                                         # test no call
             elsif((split "\/", @gt[0])[0] eq (split "\/", @gt[0])[1] && $pval<=0.05){print $fh "1/1\t";}     # test for homozygous alternative allele call
             elsif((split "\/", @gt[0])[0] eq "*" && $pval<=0.05){print $fh "0/1\t";}
             else {print $fh "9/9\t";}
        }
        print $fh "\n"; #print newline as EOS;
  }
}
close FILE;
close $fh;

########### formatting genotyping results (bcftools result)
########### perl scripts:
open(my $fh, '>', $output);
open(my $fh2, '>', $output2);
open FILE, $input or die "\nSomething is wrong $!";
foreach my $i (1..$NoSample){
    my $temp = 'Sample' . '' . $i;
    print $fh "$temp\t";
}
print $fh "\n";
print $fh2 "#CHROM\tPOS\tTYPE\tDP\tRef\tAlt\t";
foreach my $i (1..$NoSample){
    my $temp ='Sample' . '' . $i;
    print $fh2 "$temp\t";
}
print $fh2 "\n";
while(defined(my $line = <FILE>)){
    unless($line =~ /^#/){
    $line =~ s/\s/\t/g;
    my @line_element = split "\t", $line;
    my @INFO_element = split ";", @line_element[7];
    if(@INFO_element[0]=~/DP/){
        my @piece = split "=", @INFO_element[0];
        my $depth = @piece[1];
        print $fh "@line_element[0]\t@line_element[1]\tSNP\t$depth\t@line_element[3]\t@line_element[4]\t"; #print registration information
        foreach my $i (1..$NoSample){
            my @genotype_sample = split /\:/, @line_element[8+$i];
            my @gt = split /,/, @genotype_sample[1];
			if ((scalar @gt) == 3){
            if(@genotype_sample[0] =~ /0\/0/){if(@gt[0]==0 && @gt[1]>=20 && @gt[2]>=20){print $fh "@genotype_sample[0]\t";}else{print $fh "9/9\t";}}  # also need to put in test for other genotype score (<20)
            if(@genotype_sample[0] =~ /0\/1/){if(@gt[1]==0 && @gt[0]>=20 && @gt[2]>=20){print $fh "@genotype_sample[0]\t";}else{print $fh "9/9\t";}}
            if(@genotype_sample[0] =~ /1\/1/){if(@gt[2]==0 && @gt[0]>=20 && @gt[1]>=20){print $fh "@genotype_sample[0]\t";}else{print $fh "9/9\t";}}
            if(@genotype_sample[0] =~ /\.\/\./){print $fh "9/9\t";}
		   }
		   else{print $fh "9/9\t";}
        }
        print $fh "\n"; #print newline as EOS;
    }  else  {if(@INFO_element[0]=~/INDEL/){
        my @piece_2 = split "=", @INFO_element[3];
        my $depth_2 = @piece_2[1];
        print $fh2 "@line_element[0]\t@line_element[1]\tInDel\t$depth_2\t@line_element[3]\t@line_element[4]\t"; #print registration information
        foreach my $i (1..$NoSample){
            my @genotype_sample = split /\:/, @line_element[8+$i];
            my @gt2 = split /,/, @genotype_sample[1];
			if ((scalar @gt2) == 3){
            if(@genotype_sample[0] =~ /0\/0/){if(@gt2[0]==0 && @gt2[1]>=20 && @gt2[2]>=20){print $fh2 "@genotype_sample[0]\t";}else{print $fh2 "9/9\t";}}
            if(@genotype_sample[0] =~ /0\/1/){if(@gt2[1]==0 && @gt2[0]>=20 && @gt2[2]>=20){print $fh2 "@genotype_sample[0]\t";}else{print $fh2 "9/9\t";}}
            if(@genotype_sample[0] =~ /1\/1/){if(@gt2[2]==0 && @gt2[0]>=20 && @gt2[1]>=20){print $fh2 "@genotype_sample[0]\t";}else{print $fh2 "9/9\t";}}
            if(@genotype_sample[0] =~ /\.\/\./){print $fh2 "9/9\t";}
		 }
		  else{print $fh2 "9/9\t";}
		}
        print $fh2 "\n"; #print newline as EOS;
       }
    }
 }
}
    


close FILE;
close $fh;
close $fh2;

########### Make haploid map
########### R scripts
snp<-read.table("") # varscan SNP result
indel<-read.table("") # varscan Indel result
polymor<-rbind(snp,indel)
varscan.polymor<-as.matrix(polymor)

# bcftools results      
snp<-read.table("") # bcftools SNP result
indel<-read.table("") # bcftools Indel result
polymor<-rbind(snp,indel)
bcf.polymor<-as.matrix(polymor)

# read in probe location & and prepare chromosome information
chr.name.convert                           # a table listing chromosome names
chr                                        # a table listing chromosome lengthes
chr<-merge(chr, chr.name.convert, by.x="Chr",by.y="chr.name", all=F)
probe.illumina<-as.matrix(read.csv(""))    # read in custom probe genomic coordinates
var.dat<-as.matrix(read.csv(""))           # read in interspecific polymorphisms between the two parental species
for(i in each sample){
	varscan.tab<-varscan.polymor
	bcf.tab<-bcf.polymor
	loci<-intersect(rownames(varscan.tab),rownames(bcf.tab)); varscan.tab<-varscan.tab[loci,];bcf.tab<-bcf.tab[loci,] 
	tab    # matrix to store all loci with consistent genotyping results by both pipelines
	for(x in 1:dim(tab)[1]){
		if(varscan.tab[x,3] == bcf.tab[x,3]){
		   tab[x,3]<-varscan.tab[x,3]
		}
	}
		tab<-merge(tab, chr, by.x="Chrom", by.y="Chr", all=F)
		tab<-cbind(tab, rep("passed",dim(tab)[1]))
		colnames(tab)[6]<-"quality.filter"
		for(j in 1:dim(tab)[1]){
			chr2<-as.numeric(tab[j,"chr.number"])
			loci<-as.numeric(tab[j,"Position"])
			sub.probe<-probe.illumina[probe.illumina[,"chr"]==chr2,] 
			if(min(abs(sub.probe$start-loci))>=75){tab[j,"quality.filter"]<-"failed"}
		}
		tab<-tab[tab[,"quality.filter"]=="passed",] # remove genotyping calls that are not supported by designed capture probes
		chromos<-unique(tab[,"Chrom"])
		for(x in 1:length(chromos)){
			chr.geno<-tab[tab[,"Chrom"]==chromos[x],]
			colnames(chr.geno)[3]<-"geno"
			for (y in 1:(dim(chr.geno)[1]-1)){
			location<-as.numeric(chr.geno[y,"Position"])
			location2<-as.numeric(chr.geno[y+1,"Position"])
			if((location2-location)<=75){if(chr.geno[y,"geno"]!="9/9"){if(chr.geno[y,"geno"]!=chr.geno[y+1,"geno"]) {chr.geno[y,"geno"]<-"9/9"; chr.geno[y+1,"geno"]<-"9/9"}
			}}
			if((location2-location)>75){
				if(y>1){ if(location-as.numeric(chr.geno[y-1,"Position"]) > 75){chr.geno[y,"geno"]<-"9/9"}
				         if(location-as.numeric(chr.geno[y-1,"Position"]) < 75){if(chr.geno[y,"geno"]!=chr.geno[y-1,"geno"]){chr.geno[y,"geno"]<-"9/9"}}
				}
			}
		}
	      tab[rownames(chr.geno),]<-chr.geno[rownames(chr.geno),]
		}
		tab<-tab[tab[,3] != "9/9",]
		#for each sample within the tab, produce a single file as haploid map.
		
########### Testing for inheritence disequilibrium
########### R scripts
tab                                        # filtered genotyping result for all samples
chr.name.convert                           # a table listing chromosome names
chr                                        # a table listing chromosome lengthes
chr<-merge(chr, chr.name.convert, by.x="Chr",by.y="chr.name", all=F)
probe.illumina<-as.matrix(read.csv(""))    # read in custom probe genomic coordinates
phenotype<-read.csv("")                    # read in a list of phenotypes
for each locus{
     cont.tab<-rbind(c(number of heterozygous tumor samples, number of homozygous tumor samples), 
                     c(number of heterozygous benign samples, number of homozygous benign samples))
		      -1*log(chisq.test(cont.tab)$p.value,10)
}
p.adjust(all p.values, "bonferroni")

########### Make Manhatten plot
########### R scripts
plot(NULL, xlim= c(0, sum(chr$Length)), ylim=c(0, 16), xlab="Chromosomal 1-24", ylab="-Log10(p-value)", yaxt='n',xaxt='n')
axis(side=2,at=0:16,las=2)
    for each locus{   
	if locus locate on odd number chromosome {point.col="red"}
	if locus locate on even number chromosome {point.col="blue"}
                if chromosome number of current locus >1{
            coordinate<-coordinate of current locus on current chromosome i + sum of lengths of chromosome 1 to (i-1)
            points(x=coordinate, y=-1*log(chisq.test(cont.tab)$p.value,10), col=adjustcolor( color, alpha.f = 0.2), cex=0.6, pch=16)
                }
                if chromosome number of current locus =1{
            coordinate<-coordinate of locus on chromosome 1
            points(x=coordinate, y=-1*log(chisq.test(cont.tab)$p.value,10), col=adjustcolor( color, alpha.f = 0.2), cex=0.6, pch=16)
                }
               
    }
	abline(h=, col="", lty=2)  #p value=0.01 and p value where borforino correction is 0.05
	
	
########### Plot gene models
########### R scripts
plot(NULL, xlim= c(10580000, 10621085), ylim=c(-0.1,0.1), xlab="gene models", ylab="", xaxt='n', yaxt='n')
	dnad5.gene<-c(10589458,10592450)
	dnad5.mrna.start<-c(1,2508)+dnad5.gene[1]
	dnad5.mrna.end  <-c(652,2993)+dnad5.gene[1]
	dnad5.cds.start<-c(353,2508)+dnad5.gene[1]
	dnad5.cds.end<-  c(652,2993)+dnad5.gene[1]
	lines(dnad5.gene, rep(0,2), col="black")
	segments(dnad5.mrna.start, rep(0, length(dnad5.mrna.start)), dnad5.mrna.end, rep(0, length(dnad5.mrna.start)), col="black", lwd=6)
	segments(dnad5.cds.start, rep(0, length(dnad5.cds.start)), dnad5.cds.end, rep(0, length(dnad5.cds.start)), col="light blue", lwd=8)
	#tspan1 coordinate
	tspan.gene<-c(10598113,10601887)
	tspan.mrna.start<-c(1,657,856,1095,1316,1526,2421,3668)+tspan.gene[1]
	tspan.mrna.end<-c(521,749,984,1202,1390,1741,2492,3775)+tspan.gene[1]
	tspan.cds.start<-c(462,657,856,1095,1316,1526,2421)+tspan.gene[1]
	tspan.cds.end<-  c(521,749,984,1202,1390,1741,2477)+tspan.gene[1]
	lines(tspan.gene, rep(0,2), col="black")
	segments(tspan.mrna.start, rep(0, length(tspan.mrna.start)), tspan.mrna.end, rep(0, length(tspan.mrna.start)), col="black", lwd=6)
	segments(tspan.cds.start, rep(0, length(tspan.cds.start)), tspan.cds.end, rep(0, length(tspan.cds.start)), col="light blue", lwd=8)
	#rabsd coordinate
	rab3d.gene<-c(10605640,10620085)
	rab3d.mrna.start<-c(1,869,3848,8376,12317,14364)+rab3d.gene[1]
	rab3d.mrna.end<-c(729,993,3966,8609,12469,14446)+rab3d.gene[1]					 
	rab3d.cds.start<-c(542,869,3848,8376)+rab3d.gene[1]
	rab3d.cds.end<-  c(729,993,3966,8609)+rab3d.gene[1]
	lines(rab3d.gene, rep(0,2), col="black")
	segments(rab3d.mrna.start, rep(0, length(rab3d.mrna.start)), rab3d.mrna.end, rep(0, length(rab3d.mrna.start)), col="black", lwd=6)
	segments(rab3d.cds.start, rep(0, length(rab3d.cds.start)), rab3d.cds.end, rep(0, length(rab3d.cds.start)), col="light blue", lwd=8)

